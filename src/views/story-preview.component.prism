<template>
    <div class="buttons">
        <button @click="upvote">&#9650;</button>
        <button @click="downvote">&#9660;</button>
    </div>
    <div>
        <h2 #if="url">
            <a $href="url" target="_blank" rel="noopener noreferrer">{title}</a>
        </h2>
        <h2 #else>{title}</h2>
        <span>
            <!-- Prism does not like variable interpolation where siblings are not text nodes hence wrapping in span -->
            <span>{score} points | by</span>
            <a relative $href="`/u/${by}`"> {by} | </a>
            <a relative $href="`/i/${id}`">{descendants} comments</a>
            <!-- TODO comments, time, href etc -->
        </span>
    </div>
</template>

<script>
    // @useRustStatement #[derive(Clone, Debug, serde::Deserialize)]
    export interface IStoryItem {
        id: number,
        url?: string,
        by: string,
        score: number,
        descendants: number, // Number of kids
        @useRustStatement(`#[serde(default)]`)
        kids: Array<number>,
        // This is "type" in hn api but rust does not like "type"
        @useRustStatement(`#[serde(rename(deserialize = "type"))]`)
        storyType: "job" | "story" | "comment" | "poll" | "pollopt",
        text?: string,
        title: string   
    }

    export class StoryPreview extends Component<IStoryItem> {
        static getStoryPreview(id: number) {
            return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)
                .then(res => res.json());
        }

        upvote() {this.data.score++}
        downvote() {this.data.score--}
    }
</script>

<style>
    & {
        display: flex;
        flex-direction: row;
    }

    h2 {
        font-size: 14px;
        margin: 4px 0;
    }

    .buttons > button {
        background: none;
        border: none;
        color: grey;
        display: block;
    }    
</style>