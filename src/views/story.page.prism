<template>
    <!-- TODO reuse the preview -->
    <h2 #if="url">
        <a $href="url" target="_blank" rel="noopener noreferrer">{title}</a>
    </h2>
    <h2 #else>{title}</h2>
    <ul class="comments" #for="const comment of comments">
        <li>
            <Comment $data=comment></Comment>
        </li>
    </ul>
</template>

<script>
    import {MainLayout} from "./main.layout.prism";
    import {Comment, IComment} from "./comment.component.prism";
    import {IStoryItem} from "./story-preview.component.prism";

    // @useRustStatement #[derive(Clone, Debug, serde::Deserialize)]
    interface IStoryPageData extends IStoryItem {
        @useRustStatement(`#[serde(rename(deserialize = "type"))]`)
        storyType: "job" | "story" | "comment" | "poll" | "pollopt",
        @useRustStatement(`#[serde(default)]`)
        comments: Array<IComment>
    }

    @Title(`${title} on Hackernews`)
    @Metadata({
        description: "Prism & Rust based HN clone",
        image: "/favicon.ico"
    })
    @UseLayout(MainLayout)
    @Page("/i/:storyID")
    class StoryPage extends Component<IStoryPageData> {
        async load({storyID}) {
            this.data = await StoryPage.getStory(storyID);
        }

        static async getStory(id) {
            const resp = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);
            const story = await resp.json();
            const comments = story.kids.slice(0, 3).map(Comment.getComment);
            story.comments = await Promise.all(comments);
            return story;
        }
    }
</script>

<style>
    /* This will also style the lists under comment component */
    ul {
        list-style: none;
        padding-left: 0;
    }
</style>